#include "speech.h"

ros::nodehundle nh;
void robot_browser(string action,int admin){
  zmq::context_t context(1);
  zmq::socket_t sender(context,ZMQ_PUSH);
  msgpack::sbuffer buffer;
  sender.connect("tcp://133.19.23.224:8081");
  map<string, string> dict;
  dict["senderName"] = "speechRecognition";
  dict["name"] = "Robot";
  dict["time"] = "";
  if(admin == 0)
    dict["speechRec"] = "あなたの命令は聞けません";
  else
    dict["speechRec"] = action;
  dict["place"] = "pioneer";
  msgpack::pack(buffer,dict);
  zmq::message_t message(buffer.size());
  memcpy(message.data(),buffer.data(),buffer.size());
  sender.send(message);
}

int robot_number(string noun){
  ifstream stream("/home/yhirai/catkin_ws/src/noun/src/robot.json");
  value root;
  int c;
  map<std::string,std::string> json_map;
  stream >> root;
  const picojson::value::object& obj = root.get<picojson::object>();
  for (picojson::value::object::const_iterator i = obj.begin(); i != obj.end(); ++i) {
    json_map.insert( make_pair(i->first,i->second.to_str() ) );
  }
  c = json_map.count(noun);

  if(c > 0){
    object image = root.get<object>()[noun].get<object>();
    double hh = image["robot_num"].get<double>();
    return hh;
  }
  else{
    return 0;
  }
}

void armdown(speech_msgs::Extract ext_msg,string name, string admin){
  int i;
  i = 0;
  ros::Subscriber ok_sub;
  cout << i << endl;
}

void baxterarm_up(speech_msgs::Extract ext_msg,string name,string admin){
  int robot = 0;
  if(admin != name){
    robot_browser("no",0);
    cout << "あなたじゃだめですよ" << endl;
    return;
  }
  string hh;
  std_msgs::String command_msg;
  ros::Publisher baxter_pub = nh.advertise<std_msgs::String>("baxter_chatter", 1000);
  for(int i = 0 ; i < ext_msg.noun_num ; i++){
    robot = robot_number(ext_msg.noun[i]);
    if(robot != 0)
      break;
  }
  map<std::string,std::string> json_map;
  value root;
  for(int i = 1; i < ext_msg.noun_num ; i++){
    string aa = "";
    hh = "";
    aa = ext_msg.noun[i];
    root = value();
    robot = robot_number(aa);
    int c = 0;
    ifstream stream("/home/yhirai/catkin_ws/src/noun/src/noun.json");
    stream >> root;

    const picojson::value::object& obj = root.get<picojson::object>();
    for (picojson::value::object::const_iterator i = obj.begin(); i != obj.end(); ++i) {
      json_map.insert( make_pair(i->first,i->second.to_str() ) );
    }
    c = json_map.count(aa);

    if(c > 0){
      object image = root.get<object>()[aa].get<object>();
      //    cout << "command=" << image["command"].get<string>() << endl;                                                                                 
      hh = image["command"].get<string>();
    }
    if(robot == 3 && hh == "righthand"){
      command_msg.data = "armup_r";
      cout << command_msg.data << endl;
      baxter_pub.publish(command_msg);
    }
    else if(robot == 3 && hh == "lefthand"){
      command_msg.data = "armup_l";
      cout << command_msg.data << endl;
      baxter_pub.publish(command_msg);
    }
    else if(robot == 3 && hh == "doublehand"){
      command_msg.data = "armup_d";
      cout << command_msg.data << endl;
      baxter_pub.publish(command_msg);
    }
  }
    
}

