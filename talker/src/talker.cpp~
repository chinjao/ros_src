#include "ros/ros.h"
#include "std_msgs/String.h"

#include <sstream>
#include <string>
#include <iostream>
#include <fstream>

#include<iconv.h>
#include <unistd.h>

using namespace std;

/**
 * This tutorial demonstrates simple sending of messages over the ROS system.
 */
int main(int argc, char **argv)
{
  iconv_t ic;
  ic = iconv_open("UTF-8","Shift_JIS");
  /**
   * The ros::init() function needs to see argc and argv so that it can perform
   * any ROS arguments and name remapping that were provided at the command line. For programmatic
   * remappings you can use a different version of init() which takes remappings
   * directly, but for most command-line programs, passing argc and argv is the easiest
   * way to do it.  The third argument to init() is the name of the node.
   *
   * You must call one of the versions of ros::init() before using any other
   * part of the ROS system.
   */
  ros::init(argc, argv, "talker");

  /**
   * NodeHandle is the main access point to communications with the ROS system.
   * The first NodeHandle constructed will fully initialize this node, and the last
   * NodeHandle destructed will close down the node.
   */
  ros::NodeHandle n;

  /**
   * The advertise() function is how you tell ROS that you want to
   * publish on a given topic name. This invokes a call to the ROS
   * master node, which keeps a registry of who is publishing and who
   * is subscribing. After this advertise() call is made, the master
   * node will notify anyone who is trying to subscribe to this topic name,
   * and they will in turn negotiate a peer-to-peer connection with this
   * node.  advertise() returns a Publisher object which allows you to
   * publish messages on that topic through a call to publish().  Once
   * all copies of the returned Publisher object are destroyed, the topic
   * will be automatically unadvertised.
   *
   * The second parameter to advertise() is the size of the message queue
   * used for publishing messages.  If messages are published more quickly
   * than we can send them, the number here specifies how many messages to
   * buffer up before throwing some away.
   */
  ros::Publisher chatter_pub = n.advertise<std_msgs::String>("chatter", 1000);

  ros::Rate loop_rate(10);

  /**
   * A count of how many messages we have sent. This is used to create
   * a unique string for each message.
   */
  int count = 0;
  char ss[100];
  char human[30][20];
  char hito[20];
  FILE *fp;
  int a = 0;
  int b = 0;
  int c = 0;
  int d = 0;
  int i = 0;
  char *ptr_in;
  char *ptr_out;
  size_t mybufsz = (size_t)19;
  while (ros::ok())
  {
    /**
     * This is a message object. You stuff it with data, and then publish it.
     */
    std_msgs::String msg;

    fp = fopen("/home/yhirai/MMD/telnet.txt","r");
      //     cout << "ファイルに名前が入っていません" << endl;
 
    while(fgets(ss,256,fp) != NULL){
      for(i = 0 ; ss[i] != '\0' ; i++){
	if(ss[i] == '='&&a == 0){
	  b = 1;
	  a = 1;
	}
	else if(ss[i] == '='&&a == 1){
	  hito[d] = '\0';
	  b = 0;
	  a = 0;
	  c = 1;
	}
	else if(b == 1){
	  hito[d]=ss[i];
	  d++;
	} 
      }
      if(c == 1){
	strcpy(human[count],hito);
	ptr_in = hito;
	ptr_out = human[count];
	//cout << hito << endl;
	iconv(ic,&ptr_in,&mybufsz,&ptr_out,&mybufsz);
	c = 0;
	d = 0;
	count++;
      }
    }

    /*

    while(fgets(str,256,fp)){
      if(strchr(str, '\n')!=NULL)
	{
	  str[strlen(str)-1]='\0';
	}
      human[count] = string(str);
      count++;
    }
    */


    std::stringstream ss;
    ss << human[count-1];
    msg.data = ss.str();

    //ROS_INFO("%s", msg.data.c_str());

    /**
     * The publish() function is how you send messages. The parameter
     * is the message object. The type of this object must agree with the type
     * given as a template parameter to the advertise<>() call, as was done
     * in the constructor above.
     */
    chatter_pub.publish(msg);

    ros::spinOnce();

    loop_rate.sleep();
    count = 0;
    fclose(fp);
    usleep(200000);
  }


  return 0;
}
